---
title: "Client Report - [Star Wars comprehension]"
subtitle: "Course DS 250"
author: "[Darren Chambers]"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---

```{python}
#| label: libraries
#| include: false
import pandas as pd
import numpy as np
import plotly.express as px
import sklearn as sk
```
```{python}
from sklearn import preprocessing
from sklearn.model_selection import train_test_split
```


## Elevator pitch

_paste your elevator pitch here_
_A SHORT (4-5 SENTENCES) PARAGRAPH THAT `DESCRIBES KEY INSIGHTS` TAKEN FROM METRICS IN THE PROJECT RESULTS THINK TOP OR MOST IMPORTANT RESULTS._

```{python}

url = 'https://github.com/fivethirtyeight/data/raw/master/star-wars-survey/StarWars.csv'
df_names = pd.read_csv(url, encoding = "ISO-8859-1", nrows = 1).melt()
df = pd.read_csv(url, encoding = "ISO-8859-1",skiprows =2, header = None )
```

__Highlight the Questions and Tasks__

## QUESTION|TASK 1

__Shorten the column names and clean them up for easier use with pandas. Provide a table or list that exemplifies how you fixed the names.__

_type your results and analysis here_

```{python}
# %%
# this is not complete.
#\d stands for any numerical digit, 0-9 and 10-99 {1,2} howmany digits in a row so {1,3} is 1 - 999
df_names = (df_names
   .replace('Unnamed: \d{1,2}', np.nan, regex=True)
   .replace('Response', "") #If you find response make it blank ""
)

```

_include figures in chunks and discuss your findings in the figure._

```{python}
df_names = (df_names
   .replace('Unnamed: \d{1,2}', np.nan, regex=True)
   .replace('Response', "")
   .assign(
      clean_variable = lambda x: x.variable.str.strip()
         .replace(
            'Which of the following Star Wars films have you seen? Please select all that apply.','seen'),
      clean_value = lambda x: x.value.str.strip()
   )
)
```


```{python}
df_names = (df_names
   .replace('Unnamed: \d{1,2}', np.nan, regex=True)
   .replace('Response', "")
   .assign(
      clean_variable = lambda x: x.variable.str.strip()
         .replace(
            'Which of the following Star Wars films have you seen? Please select all that apply.','seen'),
      clean_value = lambda x: x.value.str.strip())
   .fillna(method = 'ffill')
   .assign(
      column_name = lambda x: x.clean_variable.str.cat(x.clean_value, sep = "__"),
   )
)

```

```{python}
#%%
df_names
```
```{python}
df.columns = df_names
df.head() #Apply columns back to data frame after some cleansing. 
```
```{python}
# %%
# Shorten the column names and clean them 
# up for easier use with pandas.
# we want to use this with the .replace() command that accepts a dictionary.
variables_replace = {
    'Which of the following Star Wars films have you seen\\? Please select all that apply\\.':'seen',
    'Please rank the Star Wars films in order of preference with 1 being your favorite film in the franchise and 6 being your least favorite film.':'rank',
    'Please state whether you view the following characters favorably, unfavorably, or are unfamiliar with him/her.':'view',
    'Do you consider yourself to be a fan of the Star Trek franchise\\?':'star_trek_fan',
    'Do you consider yourself to be a fan of the Expanded Universe\\?\x8c&aelig;':'expanded_fan',
    'Are you familiar with the Expanded Universe\\?':'know_expanded',
    'Have you seen any of the 6 films in the Star Wars franchise\\?':'seen_any',
    'Do you consider yourself to be a fan of the Star Wars film franchise\\?':'star_wars_fans',
    'Which character shot first\\?':'shot_first',
    'Unnamed: \d{1,2}':np.nan,
    ' ':'_',
}
values_replace = {
    'Response':'',
    'Star Wars: Episode ':'',
    ' ':'_'
}
```
```{python}
# %%
print(df_names.value)
df_names.value.str.strip().replace(values_replace, regex=True)
print(df_names.value)
```
```{python}
# %%
print(df_names.variable)
df_names.variable.str.strip().replace(variables_replace, regex=True)
print(df_names.variable)
```
```{python}
# %%
df_cols_use = (df_names
    .assign(
        value_replace = lambda x:  x.value.str.strip().replace(values_replace, regex=True),
        variable_replace = lambda x: x.variable.str.strip().replace(variables_replace, regex=True)
    )
    .fillna(method = 'ffill')
    .fillna(value = "")
    .assign(column_names = lambda x: x.variable_replace.str.cat(x.value_replace, sep = "__").str.strip('__').str.lower())
    )
df_cols_use
```
```{python}
#replace the colums with the new column names
df.columns = df_cols_use.column_names
df.head()
```

```{python}
#new_age column to replace age then do an age max/min scalar, standard
###This is too see what the model actually likes. 
#new_income to replace household_income
#SClearn Normalizers scalar
```


## QUESTION|TASK 2

__Clean and format the data so that it can be used in a machine learning model. As you format the data, you should complete each item listed below. In your final report provide example(s) of the reformatted data with a short description of the changes made.__
__Filter the dataset to respondents that have seen at least one film.__
__Create a new column that converts the age ranges to a single number. Drop the age range categorical column.__
__Create a new column that converts the education groupings to a single number. Drop the school categorical column__
__Create a new column that converts the income ranges to a single number. Drop the income range categorical column.__
__Create your target (also known as “y” or “label”) column based on the new income range column.__
__One-hot encode all remaining categorical columns.__

_type your results and analysis here_

```{python}
#| label: Q2
#| code-summary: Read and format data
# Include and execute your code here


```

_include figures in chunks and discuss your findings in the figure._

```{python}
#| label: Q2 chart
#| code-summary: plot example
#| fig-cap: "My useless chart"
#| fig-align: center
# Include and execute your code here
# chart = px.bar(df.head(200),
#     x="name", 
#     y="AK"
# )
# chart.show()
```


```{python}
#| label: Q2 table
#| code-summary: table example
#| tbl-cap: "Not much of a table"
#| tbl-cap-location: top
# Include and execute your code here
# mydat = df.head(1000)\
#     .groupby('year')\
#     .sum()\
#     .reset_index()\
#     .tail(10)\
#     .filter(["year", "AK","AR"])

# display(mydat)

```


## QUESTION|TASK 3

__CValidate that the data provided on GitHub lines up with the article by recreating 2 of the visuals from the article.__

_type your results and analysis here_

```{python}
#| label: Q3
#| code-summary: Read and format data
# Include and execute your code here


```

_include figures in chunks and discuss your findings in the figure._

```{python}
#| label: Q3 chart
#| code-summary: plot example
#| fig-cap: "My useless chart"
#| fig-align: center
# Include and execute your code here
# chart = px.bar(df.head(200),
#     x="name", 
#     y="AK"
# )
# chart.show()
```


```{python}
#| label: Q3 table
#| code-summary: table example
#| tbl-cap: "Not much of a table"
#| tbl-cap-location: top
# Include and execute your code here
# mydat = df.head(1000)\
#     .groupby('year')\
#     .sum()\
#     .reset_index()\
#     .tail(10)\
#     .filter(["year", "AK","AR"])

# display(mydat)

```

## QUESTION|TASK4

__Build a machine learning model that predicts whether a person makes more than $50k. Describe your model and report the accuracy.__