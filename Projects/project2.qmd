---
title: "Client Report - [Airline Delays by Airport for the U.S]"
subtitle: "Course DS 250"
author: "[Darren Chambers]"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---

```{python}
#| label: libraries
#| include: false
import pandas as pd
import numpy as np
import plotly.express as px
```


## Elevator pitch

_paste your elevator pitch here_
_A SHORT (4-5 SENTENCES) PARAGRAPH THAT `DESCRIBES KEY INSIGHTS` TAKEN FROM METRICS IN THE PROJECT RESULTS THINK TOP OR MOST IMPORTANT RESULTS._

```{python}
#| label: project data
#| code-summary: Read and format project data
# Include and execute your code here
url_flights = 'https://github.com/byuidatascience/data4missing/raw/master/data-raw/flights_missing/flights_missing.json'
flights = pd.read_json(url_flights)
# replace 999 and -999 with the mean, 1500+ replace w/ 1500. 
# 
```

```{python}
# %%
pd.crosstab(
    flights.month, 
    flights.airport_code)
```

__Highlight the Questions and Tasks__

## QUESTION|TASK 1

__Fix all of the varied missing data types in the data to be consistent (all missing values should be displayed as “NaN”)__

_type your results and analysis here_
```{python}
# %%
def missing_checks(df, column ):
    out1 = df[column].isnull().sum(axis = 0)
    out2 = df[column].describe()
    out3 = df[column].describe(exclude=np.number)
    print('\n\n\n')
    print('Checking column' + column)
    print('\n')
    print('Missing summary')
    print(out1)
    print('\n')
    print("Numeric summaries")
    print(out2)
    print('\n')
    print('Non Numeric summaries')
    print(out3)

missing_checks(flights, 'num_of_delays_nas')
missing_checks(flights, 'num_of_delays_late_aircraft')
missing_checks(flights, 'num_of_delays_weather')    
```

```{python}
# %%
flights.num_of_delays_weather.describe()
```



```{python}


# %% assign function lets each of these columns get added to the data frame. 
# makes the new column = to another column in the df. (Like excel)
# So minutes total delays will be another affed colimn at the end (severe)
# lambda just returns whatever you do to x, it is an inline function. 
# weather = (flight_delays.assign(
#     severe = flight_delays.num_of_delays_weather # no# missing, severe 
#     nodla_nona = lambda x: (x.num_of_delays_late_aircraft
#         .replace(-999, np.nan)), #missing is -999, this is taking any missing data and replacing it with nan, copies the data but gives nan for 999
#     mild_late = lambda x: x.nodla_nona.fillna(x.nodla_nona.mean())*0.3,
#     mild = np.where(
#         flight_delays.month.isin(['April', 'May', 'June', 'July', 'August']), 
#             flight_delays.num_of_delays_nas*0.4, 
#             flight_delays.num_of_delays_nas*0.65),
#     weather = lambda x: x.severe + x.mild_late + x.mild,
#     proportion_weather_delay = lambda x: x.weather / x.num_of_delays_total,
#     proportion_weather_total = lambda x:  x.weather / x.num_of_flights_total)
#     .filter(['airport_code','month','year', 'severe','mild', 'mild_late',
#     'weather', 'proportion_weather_total', 
#     'proportion_weather_delay', 'num_of_flights_total', 'num_of_delays_total']))
# weather.head()
# weather = (flight_delays.assign(
#     severe = flight_delays.num_of_delays_weather, # no# missing, severe 
#     nodla_nona = lambda x: (x.num_of_delays_late_aircraft
#         .replace(-999, np.nan)), #missing is -999, this is taking any missing data and replacing it with nan, copies the data but gives nan for 999
#     mild_late = lambda x: x.nodla_nona.fillna(x.nodla_nona.mean())*0.3,
#     mild = np.where(
#         flight_delays.month.isin(['April', 'May', 'June', 'July', 'August']), 
#             flight_delays.num_of_delays_nas*0.4, 
#             flight_delays.num_of_delays_nas*0.65),
#     weather = lambda x: x.severe + x.mild_late + x.mild,
#     proportion_weather_delay = lambda x: x.weather / x.num_of_delays_total,
#     proportion_weather_total = lambda x:  x.weather / x.num_of_flights_total)
#     .filter(['airport_code','month','year', 'severe','mild', 'mild_late',
#     'weather', 'proportion_weather_total', 
#     'proportion_weather_delay', 'num_of_flights_total', 'num_of_delays_total']))
# weather.head()



```



_include figures in chunks and discuss your findings in the figure._





## QUESTION|TASK 2

__Which airport has the worst delays?__

_type your results and analysis here_

```{python}
#| label: Q2
#| code-summary: Read and format data
# Include and execute your code here

```

```

_include figures in chunks and discuss your findings in the figure._






## QUESTION|TASK 3

__What is the best month to fly if you want to avoid delays of any length?__






_include figures in chunks and discuss your findings in the figure._







## __QUESTION|TASK 4__

__Your job is to create a new column that calculates the total number of flights delayed by weather (both severe and mild).__

## __QUESTION|TASK 5__

__Using the new weather variable calculated above, create a barplot showing the proportion of all flights that are delayed by weather at each airport. Discuss what you learn from this graph.__