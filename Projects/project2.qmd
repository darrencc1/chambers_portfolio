---
title: "Client Report - [Airline Delays by Airport for the U.S]"
subtitle: "Course DS 250"
author: "[Darren Chambers]"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---

```{python}
#| label: libraries
#| include: false
import pandas as pd
import numpy as np
import plotly.express as px
```


## Elevator pitch

_paste your elevator pitch here_
_A SHORT (4-5 SENTENCES) PARAGRAPH THAT `DESCRIBES KEY INSIGHTS` TAKEN FROM METRICS IN THE PROJECT RESULTS THINK TOP OR MOST IMPORTANT RESULTS._

```{python}
#| label: project data
#| code-summary: Read and format project data
# Include and execute your code here
url_flights = 'https://github.com/byuidatascience/data4missing/raw/master/data-raw/flights_missing/flights_missing.json'
flights = pd.read_json(url_flights)
# replace 999 and -999 with the mean, 1500+ replace w/ 1500. 
# 
flights = flights.dropna(subset=['month'])

# Display the head of the DataFrame to verify the removal
print(flights.head())
```

```{python}
# %%
pd.crosstab(
    flights.month, 
    flights.airport_code)
```

__Highlight the Questions and Tasks__

## QUESTION|TASK 1

__Fix all of the varied missing data types in the data to be consistent (all missing values should be displayed as “NaN”)__

_type your results and analysis here_
```{python}
# %%
def missing_checks(df, column ):
    out1 = df[column].isnull().sum(axis = 0)
    out2 = df[column].describe()
    out3 = df[column].describe(exclude=np.number)
    print('\n\n\n')
    print('Checking column' + column)
    print('\n')
    print('Missing summary')
    print(out1)
    print('\n')
    print("Numeric summaries")
    print(out2)
    print('\n')
    print('Non Numeric summaries')
    print(out3)

missing_checks(flights, 'num_of_delays_nas')
missing_checks(flights, 'num_of_delays_late_aircraft')
missing_checks(flights, 'num_of_delays_weather')    
```

```{python}
# %%
flights.replace({'num_of_delays_nas': {999: np.nan, -999: np.nan},
                 'num_of_delays_late_aircraft': {999: np.nan, -999: np.nan},
                 'num_of_delays_weather': {999: np.nan, -999: np.nan},
                 'num_of_delays_security': {999: np.nan, -999: np.nan},
                 'num_of_delays_carrier': {999: np.nan, -999: np.nan},
                 'delayed': {999: np.nan, -999: np.nan},
                 'day_of_month': {999: np.nan, -999: np.nan},
                 'day_of_week': {999: np.nan, -999: np.nan},
                 'month': {999: np.nan, -999: np.nan}
                }, inplace=True)

# Replace values over 1500 with 1500
flights['num_of_delays_nas'].replace({1500: np.nan}, inplace=True)
flights['num_of_delays_late_aircraft'].replace({1500: np.nan}, inplace=True)
flights['num_of_delays_weather'].replace({1500: np.nan}, inplace=True)
flights['num_of_delays_security'].replace({1500: np.nan}, inplace=True)
flights['num_of_delays_carrier'].replace({1500: np.nan}, inplace=True)

# Display the first few rows to verify changes
print(flights.head())
```





_include figures in chunks and discuss your findings in the figure._





## QUESTION|TASK 2

__Which airport has the worst delays?__

_I decided to find the worst delays by TOTAL minutes delayed. Then I put this in a bar chart to show the top 5 in terms of total minutes delayed. ORD is a little worse than ATL but both of these are almost twice as many minutes delayed than the rest._

```{python}
worst_delayed_airport = flights.groupby('airport_code')['minutes_delayed_total'].sum().idxmax()

# Display the result
print("The airport with the worst delays based on total minutes delayed is:", worst_delayed_airport)

```

```{python}
total_minutes_delayed_by_airport = flights.groupby('airport_code')['minutes_delayed_total'].sum()

# Sort the airports by total minutes delayed and select the top ten
top_ten_worst_airports = total_minutes_delayed_by_airport.nlargest(5)

# Convert the result to a DataFrame
top_ten_worst_airports_df = top_ten_worst_airports.reset_index()

# Plot the top ten worst airports
fig = px.bar(top_ten_worst_airports_df, x='airport_code', y='minutes_delayed_total',
             title='Top Ten Worst Airports in Terms of Total Minutes Delayed',
             labels={'airport_code': 'Airport Code', 'minutes_delayed_total': 'Total Minutes Delayed'})
fig.update_xaxes(title_font=dict(size=18), tickangle=45)
fig.update_yaxes(title_font=dict(size=18))
fig.show()
```

## QUESTION|TASK 3

__What is the best month to fly if you want to avoid delays of any length?__

```{python}
print("The lowest ")
# Sort the total minutes delayed by month in ascending order
total_minutes_delayed_by_month_sorted = total_minutes_delayed_by_month.sort_values()

# Plot the total minutes delayed for each month, ordered by lowest total minutes delayed
fig = px.bar(total_minutes_delayed_by_month_sorted.reset_index(), x='month', y='minutes_delayed_total',
             title='Total Minutes Delayed by Month (Ordered by Lowest Total Minutes Delayed)',
             labels={'month': 'Month', 'minutes_delayed_total': 'Total Minutes Delayed'})
fig.update_xaxes(title_font=dict(size=18), tickangle=45)
fig.update_yaxes(title_font=dict(size=18))
fig.show()
```





_include figures in chunks and discuss your findings in the figure._







## __QUESTION|TASK 4__

__Your job is to create a new column that calculates the total number of flights delayed by weather (both severe and mild).__

## __QUESTION|TASK 5__

__Using the new weather variable calculated above, create a barplot showing the proportion of all flights that are delayed by weather at each airport. Discuss what you learn from this graph.__