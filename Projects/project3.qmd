---
title: "Client Report - [Insert Project Title]"
subtitle: "Course DS 250"
author: "[Darren Chambers]"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---

```{python}
#| label: libraries
#| include: false
import pandas as pd
import numpy as np
import plotly.express as px
import sqlite3
```

```{python}
sqlite_file = 'lahmansbaseballdb.sqlite'
con = sqlite3.connect(sqlite_file)

q = 'SELECT * FROM allstarfull LIMIT 5'
results = pd.read_sql_query(q,con)

# results
```


## Elevator pitch

_paste your elevator pitch here_
_A SHORT (4-5 SENTENCES) PARAGRAPH THAT `DESCRIBES KEY INSIGHTS` TAKEN FROM METRICS IN THE PROJECT RESULTS THINK TOP OR MOST IMPORTANT RESULTS._



__Highlight the Questions and Tasks__

## QUESTION|TASK 1

__Write an SQL query to create a new dataframe about baseball players who attended BYU-Idaho. The new table should contain five columns: playerID, schoolID, salary, and the yearID/teamID associated with each salary. Order the table by salary (highest to lowest) and print out the table in your report.__


_I made sure to only display unique values in this table, meaning I used distinct to ensure there were no repeating values and it is ordered by salary. We can see that there are only 2 players who had attented byui._
```{python}

q = '''SELECT DISTINCT cp.playerID, cp.schoolID, s.salary, s.yearID, s.teamID
FROM collegeplaying cp
JOIN salaries s ON cp.playerID = s.playerID
WHERE cp.schoolID = 'idbyuid'
ORDER BY s.salary DESC'''

result = pd.read_sql_query(q, con)

print(result)
```

```{python}
sqlite_file = 'lahmansbaseballdb.sqlite'
con = sqlite3.connect(sqlite_file)

q = 'SELECT * FROM allstarfull LIMIT 5'
results = pd.read_sql_query(q,con)

results
```

```{python}
# Use pandas to read the SQL query into a DataFrame
# df = pd.read_sql_query(q, con)

# # Close the SQLite database connection
# #con.close()

# # Print the DataFrame
# print(df)
```



## QUESTION|TASK 2

__This three-part question requires you to calculate batting average (number of hits divided by the number of at-bats)__

__Write an SQL query that provides playerID, yearID, and batting average for players with at least 1 at bat that year. Sort the table from highest batting average to lowest, and then by playerid alphabetically. Show the top 5 results in your report.__

__Use the same query as above, but only include players with at least 10 at bats that year. Print the top 5 results.__

__Now calculate the batting average for players over their entire careers (all years combined). Only include players with at least 100 at bats, and print the top 5 results.__

_The top hitters in this situation have an average hit rate of 100%. If you look in the H (hits) row you will see they have only hit once, as well as been at bat once. 
```{python}
q = '''
SELECT playerID, yearID, H, AB, (H * 100) / AB * 1.0 AS "Average Hits %"
FROM batting
WHERE AB >= 1 
GROUP BY playerID
ORDER BY H * 100/AB *1.0 DESC 
LIMIT 5'''

result = pd.read_sql_query(q, con)

print(result)
```

_When you take the At Bats and increase it to at least 10 times you see that the highest stat is 64% instead of 100% like the previous chart. These percentiles are much more useful as they have at least some data behind them. These top five batters all were at bat 11-16 times._

```{python}
q = '''
SELECT playerID, yearID, H, AB, (H * 100) / AB * 1.0 AS "Average Hits %"
FROM batting
WHERE AB >= 10 
GROUP BY playerID
ORDER BY H * 100/AB *1.0 DESC 
LIMIT 5'''

result = pd.read_sql_query(q, con)

print(result)
```

_In this last set of data you see the Average Hits go down even further from before. However, this is the most useful of the charts. All of these batters had well over 100 bats, meaning that they have many actual data points to use for their average hits. If you were to look at players you were interested in hiring for a team, the amount of Hits and at bats influencing the Average hits would be important to note. Concistency over long periods / many data points and average hits at 49% would be much more indicative of good hitters than someone who has been at bat 14 times and has a 64% average hit rate. 
```{python}
#| label: Q2
#| code-summary: Read and format data
# Include and execute your code here

q = """ 
SELECT playerID, yearID, H, AB, (H * 100) / AB * 1.0 AS "Average hits %"
FROM batting 
WHERE AB >= 100
GROUP BY playerID 
ORDER BY  H * 100/AB *1.0 DESC
LIMIT 5
"""
result = pd.read_sql_query(q, con)

print(result) 
```


## QUESTION|TASK 3

__Pick any two baseball teams and compare them using a metric of your choice (average salary, home runs, number of wins, etc). Write an SQL query to get the data you need, then make a graph using Plotly Express to visualize the comparison. What do you learn?__

_type your results and analysis here_


```{python}
# q = '''
# SELECT teamID, yearID, HR, H, AB, (HR * 100) / H * 1.0 AS "Average Home Runs %"
# FROM teams AS t
# JOIN batting AS b
#   ON b.teamID = t.teamID 
# WHERE teamID = FW1 AND NY2
# GROUP BY 
# ORDER BY (HR * 100) / H * 1.0 DESC 
# '''
q= '''SELECT teamID, 
       yearID, 
       SUM(HR) AS Total_Home_Runs, 
       SUM(H) AS Total_Hits, 
       SUM(AB) AS Total_At_Bats, 
       (SUM(HR) * 100.0) / SUM(H) AS "Average Home Runs %"
FROM teams
WHERE teamID IN ('FW1', 'NY2')
GROUP BY teamID, yearID
ORDER BY "Average_Home_Runs_Percentage" DESC'''

result = pd.read_sql_query(q, con)

print(result)

```

_include figures in chunks and discuss your findings in the figure._

```{python}

chart = px.bar(df.head(200),
    x="name", 
    y="AK"
)
chart.show()
```


```{python}
#| label: Q3 table
#| code-summary: table example
#| tbl-cap: "Not much of a table"
#| tbl-cap-location: top
# Include and execute your code here
mydat = df.head(1000)\
    .groupby('year')\
    .sum()\
    .reset_index()\
    .tail(10)\
    .filter(["year", "AK","AR"])

display(mydat)

```
