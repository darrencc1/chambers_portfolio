---
title: "Client Report - [Insert Project Title]"
subtitle: "Course DS 250"
author: "[STUDENT NAME]"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---

```{python}
#| label: libraries
#| include: false
import pandas as pd
import numpy as np
import plotly.express as px
import sqlite3
```

```{python}
sqlite_file = 'lahmansbaseballdb.sqlite'
con = sqlite3.connect(sqlite_file)

q = 'SELECT * FROM allstarfull LIMIT 5'
results = pd.read_sql_query(q,con)

results
```


## Elevator pitch

_paste your elevator pitch here_
_A SHORT (4-5 SENTENCES) PARAGRAPH THAT `DESCRIBES KEY INSIGHTS` TAKEN FROM METRICS IN THE PROJECT RESULTS THINK TOP OR MOST IMPORTANT RESULTS._



__Highlight the Questions and Tasks__

## QUESTION|TASK 1

__Write an SQL query to create a new dataframe about baseball players who attended BYU-Idaho. The new table should contain five columns: playerID, schoolID, salary, and the yearID/teamID associated with each salary. Order the table by salary (highest to lowest) and print out the table in your report.__





```{python}

q = '''SELECT DISTINCT cp.playerID, cp.schoolID, s.salary, s.yearID, s.teamID
FROM collegeplaying cp
JOIN salaries s ON cp.playerID = s.playerID
WHERE cp.schoolID = 'idbyuid'
ORDER BY s.salary DESC'''
```

_I made sure to only display unique values in this table, meaning I used distinct to ensure there were no repeating values and it is ordered by salary. We can see that there are only 3 players who had attented byui._

```{python}
# Use pandas to read the SQL query into a DataFrame
df = pd.read_sql_query(q, con)

# Close the SQLite database connection
#con.close()

# Print the DataFrame
print(df)
```



## QUESTION|TASK 2

__This three-part question requires you to calculate batting average (number of hits divided by the number of at-bats)

Write an SQL query that provides playerID, yearID, and batting average for players with at least 1 at bat that year. Sort the table from highest batting average to lowest, and then by playerid alphabetically. Show the top 5 results in your report.

Use the same query as above, but only include players with at least 10 at bats that year. Print the top 5 results. 

Now calculate the batting average for players over their entire careers (all years combined). Only include players with at least 100 at bats, and print the top 5 results.__

_type your results and analysis here_
```{python}
q = '''
SELECT playerID, yearID, AB, H, (H * 100) / AB *1 AS "Average Hits %
FROM batting
WHERE AB >= 1 
GROUP BY playerID
ORDER BY H * 100/AB *1.0 ASC, playerID DESC
'''
```

```{python}
result = pd.read_sql_query(q, con)

print(result)
```

```{python}
#| label: Q2
#| code-summary: Read and format data
# Include and execute your code here

q = """ 
SELECT playerID, yearID, H, AB, (H * 100) / AB * 1.0 AS "Average hits %"
FROM batting 
WHERE AB >= 100
GROUP BY playerID 
ORDER BY  H * 100/AB *1.0 DESC, playerID asc
"""

```


```{python}
results = pd.read_sql_query(q, con)

# Close the database connection
# con.close()

# Print the DataFrame
print(results)

# SUM(H) / SUM(AB) * 100
# FROM batting
# HAVING AB >= 100 
```



_include figures in chunks and discuss your findings in the figure._







## QUESTION|TASK 3

__Pick any two baseball teams and compare them using a metric of your choice (average salary, home runs, number of wins, etc). Write an SQL query to get the data you need, then make a graph using Plotly Express to visualize the comparison. What do you learn?__

_type your results and analysis here_

```{python}
#| label: Q3
#| code-summary: Read and format data
# Include and execute your code here


```

_include figures in chunks and discuss your findings in the figure._

```{python}
#| label: Q3 chart
#| code-summary: plot example
#| fig-cap: "My useless chart"
#| fig-align: center
# Include and execute your code here
chart = px.bar(df.head(200),
    x="name", 
    y="AK"
)
chart.show()
```


```{python}
#| label: Q3 table
#| code-summary: table example
#| tbl-cap: "Not much of a table"
#| tbl-cap-location: top
# Include and execute your code here
mydat = df.head(1000)\
    .groupby('year')\
    .sum()\
    .reset_index()\
    .tail(10)\
    .filter(["year", "AK","AR"])

display(mydat)

```
